@{
    ViewData["Title"] = "Edit Restaurant Profile";
    var details = ViewBag.RestaurantDetails as RestaurantsModel;
    var followerCounts = ViewBag.FollowerCounts as Dictionary<string, int>;
    var restaurantId = "12345"; // Replace with your specific restaurant ID
}

<div class="container mt-5">
    <form action="/RestProfile/SaveProfile" method="post" enctype="multipart/form-data" class="p-4 shadow-sm rounded" style="background: #fff;">
        <div class="row mb-4">
            <div class="col-sm-10">
                <h1 class="display-4">Edit Restaurant Profile</h1>
            </div>
            <div class="col-sm-2 text-center">
                <div class="profile-picture">
                    <img src="~/images/picture.png" alt="Profile Photo" id="profilePhoto"
                        class="rounded-circle img-thumbnail" style="cursor: pointer;">
                    <input type="file" id="fileInput" style="display:none" accept="image/*">
                </div>
            </div>
        </div>

        <input type="hidden" name="RestID" value="@details.RestID" />

        <div class="form-group">
            <label for="RestName">Restaurant Name</label>
            <input type="text" id="RestName" name="RestName" class="form-control" value="@details.RestName" required />
        </div>

        <div class="form-group">
            <label for="RestEmail">Restaurant Email</label>
            <input type="email" id="RestEmail" name="RestEmail" class="form-control" value="@details.RestEmail" required />
            <span class="valid-icon"></span>
        </div>

        <div class="form-group">
            <label for="RestAddress">Restaurant Address</label>
            <div class="input-group">
                <input type="text" id="RestAddress" name="RestAddress" class="form-control" value="@details.RestAddress" required />
                <div class="input-group-append">
                    <button type="button" class="btn btn-outline-secondary" onclick="openMapModal()">Select on Map</button>
                </div>
            </div>
            <input type="hidden" id="latitude" name="RestLat" value="@details.RestLat" />
            <input type="hidden" id="longitude" name="RestLong" value="@details.RestLong" />
        </div>

        <div class="form-group">
            <label for="RestContact">Restaurant Contact</label>
            <input type="tel" id="RestContact" name="RestContact" class="form-control" value="@details.RestContact" required />
        </div>

        <div class="form-group">
            <label for="RestWebsite">Restaurant Website</label>
            <input type="url" id="RestWebsite" name="RestWebsite" class="form-control" value="@details.RestWebsite" required />
        </div>

        <div class="form-group">
            <label for="RestBio">Restaurant Bio</label>
            <textarea id="RestBio" name="RestBio" class="form-control" rows="3" required>@details.RestBio</textarea>
        </div>

        <div class="form-group">
            <label for="RestPic">Restaurant Picture</label>
            <input type="file" id="RestPic" name="RestPic" class="form-control-file" accept="image/*" />
        </div>

        <div class="form-row">
            <button type="submit" class="btn btn-primary btn-block">Save</button>
            <button type="button" class="btn btn-secondary btn-block" onclick="window.location.href='/Restaurant/CancelEdit'">Cancel</button>
        </div>
    </form>
</div>

<!-- Map Modal -->
<div class="modal fade" id="mapModal" tabindex="-1" role="dialog" aria-labelledby="mapModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="mapModalLabel">Select Address</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input id="pac-input" class="controls form-control mb-3" type="text" placeholder="Search Box" />
                <div id="map" style="height: 400px;"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveAddress()">Save Address</button>
            </div>
        </div>
    </div>
</div>
<script
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBcZ-tpp7-d401k61UO39tGYGvq-yOAn1s&libraries=places"></script>
<script>
    let map, marker, searchBox;

    function openMapModal() {
        $('#mapModal').modal('show');
        setTimeout(() => initializeMap(), 500);
    }

    function initializeMap() {
        const initialLocation = { lat: @details.RestLat, lng: @details.RestLong }; // Default to Singapore

        map = new google.maps.Map(document.getElementById("map"), {
            center: initialLocation,
            zoom: 12,
            mapTypeId: "roadmap",
        });

        marker = new google.maps.Marker({
            map,
            draggable: true
        });

        searchBox = new google.maps.places.SearchBox(document.getElementById("pac-input"));

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(document.getElementById("pac-input"));

        map.addListener("bounds_changed", () => {
            searchBox.setBounds(map.getBounds());
        });

        searchBox.addListener("places_changed", () => {
            const places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            const bounds = new google.maps.LatLngBounds();

            places.forEach((place) => {
                if (!place.geometry || !place.geometry.location) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                marker.setPosition(place.geometry.location);

                if (place.geometry.viewport) {
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });

            map.fitBounds(bounds);
        });

        map.addListener("click", (event) => {
            placeMarker(event.latLng);
        });

        marker.addListener("dragend", (event) => {
            placeMarker(event.latLng);
        });
    }

    function placeMarker(location) {
        marker.setPosition(location);
    }

    function saveAddress() {
        const geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'location': marker.getPosition() }, function (results, status) {
            if (status === 'OK') {
                if (results[0]) {
                    document.getElementById('RestAddress').value = results[0].formatted_address;
                    document.getElementById('latitude').value = marker.getPosition().lat();
                    document.getElementById('longitude').value = marker.getPosition().lng();
                    $('#mapModal').modal('hide');
                } else {
                    alert('No results found');
                }
            } else {
                alert('Geocoder failed due to: ' + status);
            }
        });
    }

    document.getElementById('profilePhoto').addEventListener('click', function () {
        document.getElementById('fileInput').click();
    });

    document.getElementById('fileInput').addEventListener('change', function (event) {
        const file = event.target.files[0];
        if (file) {
            uploadProfilePhoto(file);
        }
    });

    function uploadProfilePhoto(file) {
        const formData = new FormData();
        formData.append('profilePhoto', file);

        fetch('/upload-profile-photo', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('profilePhoto').src = data.newPhotoUrl;
                } else {
                    alert('Failed to upload photo.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while uploading the photo.');
            });
    }
</script>

<style>
    body {
        background-color: #f8f9fa;
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    }

    .container {
        max-width: 800px;
    }

    .display-4 {
        font-weight: 300;
    }

    .form-control,
    .form-control-file {
        border-radius: 0.375rem;
    }

    .btn {
        border-radius: 0.375rem;
    }

    .profile-picture img {
        width: 100px;
        height: 100px;
    }

    .shadow-sm {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    #pac-input {
        margin-top: 10px;
        width: calc(100% - 20px);
        padding: 10px;
        z-index: 1050;
        position: relative;
    }

    .pac-container {
        z-index: 2000 !important;
    }
</style>
