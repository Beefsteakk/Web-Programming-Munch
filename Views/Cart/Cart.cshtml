@model EffectiveWebProg.Models.CartModel
@{
    Layout = "_Layout";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Cart</title>
    <link rel="stylesheet" href="~/css/cart.css">
</head>
<body>
    <div class="container">
        <div class="cart">
            <h2>Cart</h2>
            <div class="product-header">
                <span>Product</span>
                <span>Quantity</span>
                <span>Price</span>
                <span></span>
            </div>
            @if (Model.CartItem.Any())
            {
                @foreach (var item in Model.CartItem)
                {
                    <div class="product">
                        <div class="product-info">
                            <img src="@item.Items.ItemPic" alt="@item.Items.ItemName" class="cart-item-image">
                            <div class="cart-item-details">
                                <h3 class="cart-item-name">@item.Items.ItemName</h3>
                            </div>
                        </div>
                        <div class="quantity">
                            <button class="decrease">-</button>
                            <p class="cart-item-quantity">@item.Quantity</p>
                            <button class="increase">+</button>
                        </div>
                        <span class="cart-item-price">$@item.Items.Price.ToString("0.00")</span>
                        <button class="remove-from-cart" data-item-id="@item.Items.ItemID">x</button>
                    </div>
                }
            }
            else
            {
                <p>Your cart is empty.</p>
            }
        </div>
        <div class="summary">
            <h2>Summary</h2>
            <p>Total: $@Model.CartTotal</p>
            <button>Check Out</button>
        </div>            
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const updateQuantity = async (itemId, action) => {
                const url = action === 'increase' ? '/Cart/IncreaseQuantity' : '/Cart/DecreaseQuantity';
                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(itemId)
                    });

                    if (response.ok) {
                        location.reload(); // Refresh the page or update the cart display
                    } else {
                        const errorText = await response.text();
                        alert(`Failed to update item quantity: ${errorText}`);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while updating the item quantity.');
                }
            };

            const increaseButtons = document.querySelectorAll('.quantity .increase');
            increaseButtons.forEach(button => {
                button.addEventListener('click', (e) => {
                    const itemId = e.target.closest('.product').querySelector('.remove-from-cart').getAttribute('data-item-id');
                    updateQuantity(itemId, 'increase');
                });
            });

            const decreaseButtons = document.querySelectorAll('.quantity .decrease');
            decreaseButtons.forEach(button => {
                button.addEventListener('click', (e) => {
                    const itemId = e.target.closest('.product').querySelector('.remove-from-cart').getAttribute('data-item-id');
                    updateQuantity(itemId, 'decrease');
                });
            });

            const removeFromCartButtons = document.querySelectorAll('.remove-from-cart');
            removeFromCartButtons.forEach(button => {
                button.addEventListener('click', async (e) => {
                    const itemId = e.target.getAttribute('data-item-id');
                    try {
                        const response = await fetch('/Cart/RemoveFromCart', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(itemId)
                        });

                        if (response.ok) {
                            alert('Item removed from cart successfully!');
                            location.reload(); // Optionally, refresh the page or update the cart display
                        } else {
                            const errorText = await response.text();
                            alert(`Failed to remove item from cart: ${errorText}`);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('An error occurred while removing the item from the cart.');
                    }
                });
            });
        });
    </script>
</body>
</html>
