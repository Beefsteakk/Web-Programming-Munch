// <auto-generated />
using System;
using EffectiveWebProg.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EffectiveWebProg.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CartItemsModel", b =>
                {
                    b.Property<Guid>("CartID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("ItemID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.HasKey("CartID", "ItemID");

                    b.HasIndex("ItemID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("CartModel", b =>
                {
                    b.Property<Guid>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<string>("CartName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<double>("CartTotal")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RestID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CartID");

                    b.HasIndex("RestID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.CommentsModel", b =>
                {
                    b.Property<Guid>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("uuid()");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("PostID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("RestID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.HasKey("CommentID");

                    b.HasIndex("PostID");

                    b.HasIndex("RestID");

                    b.HasIndex("UserID")
                        .HasDatabaseName("AuthorID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.CreditCardModel", b =>
                {
                    b.Property<Guid>("CardID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<double>("CardBalance")
                        .HasColumnType("double");

                    b.Property<int>("CardCSV")
                        .HasColumnType("int");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CardNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.HasKey("CardID");

                    b.ToTable("CreditCard");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.EmployeesModel", b =>
                {
                    b.Property<Guid>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EmployeePic")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("ReservationTime")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("RestID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.HasKey("EmployeeID");

                    b.HasIndex("RestID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.FollowingsModel", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("RestID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("FollowCreatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("UserID", "RestID");

                    b.HasIndex("RestID");

                    b.ToTable("Followings");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.InventoryItemsModel", b =>
                {
                    b.Property<Guid>("InventoryID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("ItemID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StockCount")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.HasKey("InventoryID", "ItemID");

                    b.HasIndex("ItemID");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.InventoryModel", b =>
                {
                    b.Property<Guid>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<string>("InventoryName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("RestID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.HasKey("InventoryID");

                    b.HasIndex("RestID");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.ItemCatModel", b =>
                {
                    b.Property<Guid>("CatID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CatID");

                    b.ToTable("ItemCat");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.ItemsModel", b =>
                {
                    b.Property<Guid>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CatID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<string>("ItemName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ItemPic")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("ItemID");

                    b.HasIndex("CatID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.PostLikesModel", b =>
                {
                    b.Property<Guid>("PostID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.Property<Guid>("UserID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LikeCreatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("PostID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.PostPicsModel", b =>
                {
                    b.Property<Guid>("PicID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("PostID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.HasKey("PicID");

                    b.HasIndex("PostID");

                    b.ToTable("PostPics");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.PostsModel", b =>
                {
                    b.Property<Guid>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("uuid()");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("PostCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("RestID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.HasKey("PostID");

                    b.HasIndex("RestID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.ReservationsModel", b =>
                {
                    b.Property<Guid>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("uuid()");

                    b.Property<int>("NumOfGuests")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReservationDate")
                        .HasColumnType("date");

                    b.Property<string>("ReservationStatus")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan>("ReservationTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("ReservedName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("RestID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<string>("SpecialRequest")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("UserID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.HasKey("ReservationID");

                    b.HasIndex("RestID");

                    b.HasIndex("UserID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.RestCardModel", b =>
                {
                    b.Property<Guid>("RestID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("CardID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.HasKey("RestID", "CardID");

                    b.HasIndex("CardID");

                    b.ToTable("RestCards");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.RestaurantsModel", b =>
                {
                    b.Property<Guid>("RestID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("uuid()");

                    b.Property<string>("RestAddress")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RestBio")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("RestCloseHr")
                        .HasColumnType("time(6)");

                    b.Property<int?>("RestContact")
                        .HasColumnType("int");

                    b.Property<string>("RestCoverPic")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RestEmail")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("RestLat")
                        .HasColumnType("double");

                    b.Property<double?>("RestLong")
                        .HasColumnType("double");

                    b.Property<string>("RestName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan?>("RestOpenHr")
                        .HasColumnType("time(6)");

                    b.Property<string>("RestPassword")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("RestPic")
                        .HasMaxLength(255)
                        .HasColumnType("longblob");

                    b.Property<float?>("RestRatings")
                        .HasColumnType("float");

                    b.Property<string>("RestWebsite")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("RestID");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.TimeSheetModel", b =>
                {
                    b.Property<Guid>("SheetID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<string>("Day")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("EmployeeID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.HasKey("SheetID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("TimeSheets");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.UserCardModel", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("CardID")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnOrder(0);

                    b.HasKey("UserID", "CardID");

                    b.HasIndex("CardID");

                    b.ToTable("UserCards");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.UsersModel", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("uuid()");

                    b.Property<int?>("AccountToken")
                        .HasColumnType("int");

                    b.Property<bool?>("AccountVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserContactNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("UserCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserProfilePic")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CartItemsModel", b =>
                {
                    b.HasOne("CartModel", "Cart")
                        .WithMany("CartItem")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CartItems_ibfk_1");

                    b.HasOne("EffectiveWebProg.Models.ItemsModel", "Items")
                        .WithMany("CartItem")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CartItems_ibfk_2");

                    b.Navigation("Cart");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("CartModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.RestaurantsModel", "Rest")
                        .WithMany("Cart")
                        .HasForeignKey("RestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Cart_ibfk_1");

                    b.Navigation("Rest");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.CommentsModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.PostsModel", "Post")
                        .WithMany("Comment")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Comments_ibfk_1");

                    b.HasOne("EffectiveWebProg.Models.RestaurantsModel", "Restaurant")
                        .WithMany("Comment")
                        .HasForeignKey("RestID")
                        .HasConstraintName("Comments_ibfk_3");

                    b.HasOne("EffectiveWebProg.Models.UsersModel", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserID")
                        .HasConstraintName("Comments_ibfk_2");

                    b.Navigation("Post");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.EmployeesModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.RestaurantsModel", "Restaurant")
                        .WithMany("Employee")
                        .HasForeignKey("RestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Employees_ibfk_1");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.FollowingsModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.RestaurantsModel", "Rest")
                        .WithMany("Followings")
                        .HasForeignKey("RestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Followings_ibfk_2");

                    b.HasOne("EffectiveWebProg.Models.UsersModel", "User")
                        .WithMany("Followings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Followings_ibfk_1");

                    b.Navigation("Rest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.InventoryItemsModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.InventoryModel", "Inventory")
                        .WithMany("InventoryItem")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("InventoryItems_ibfk_1");

                    b.HasOne("EffectiveWebProg.Models.ItemsModel", "Items")
                        .WithMany("InventoryItem")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("InventoryItems_ibfk_2");

                    b.Navigation("Inventory");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.InventoryModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.RestaurantsModel", "Rest")
                        .WithMany("Inventory")
                        .HasForeignKey("RestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Inventory_ibfk_1");

                    b.Navigation("Rest");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.ItemsModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.ItemCatModel", "ItemCat")
                        .WithMany("Item")
                        .HasForeignKey("CatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Items_ibfk_1");

                    b.Navigation("ItemCat");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.PostLikesModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.PostsModel", "Post")
                        .WithMany("PostLike")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PostLikes_ibfk_1");

                    b.HasOne("EffectiveWebProg.Models.UsersModel", "User")
                        .WithMany("PostLike")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PostLikes_ibfk_2");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.PostPicsModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.PostsModel", "Post")
                        .WithMany("PostPic")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PostPics_ibfk_1");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.PostsModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.RestaurantsModel", "Restaurant")
                        .WithMany("Post")
                        .HasForeignKey("RestID")
                        .HasConstraintName("Posts_ibfk_2");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.ReservationsModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.RestaurantsModel", "Restaurant")
                        .WithMany("Reservation")
                        .HasForeignKey("RestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Reservations_ibfk_2");

                    b.HasOne("EffectiveWebProg.Models.UsersModel", "User")
                        .WithMany("Reservation")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Reservations_ibfk_1");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.RestCardModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.CreditCardModel", "Card")
                        .WithMany("RestCard")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RestCard_ibfk_2");

                    b.HasOne("EffectiveWebProg.Models.RestaurantsModel", "Rest")
                        .WithMany("RestCard")
                        .HasForeignKey("RestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RestCard_ibfk_1");

                    b.Navigation("Card");

                    b.Navigation("Rest");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.TimeSheetModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.EmployeesModel", "Employees")
                        .WithMany("TimeSheets")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TimeSheet_ibfk_1");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.UserCardModel", b =>
                {
                    b.HasOne("EffectiveWebProg.Models.CreditCardModel", "Card")
                        .WithMany("UserCard")
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserCard_ibfk_2");

                    b.HasOne("EffectiveWebProg.Models.UsersModel", "User")
                        .WithMany("UserCard")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserCard_ibfk_1");

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CartModel", b =>
                {
                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.CreditCardModel", b =>
                {
                    b.Navigation("RestCard");

                    b.Navigation("UserCard");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.EmployeesModel", b =>
                {
                    b.Navigation("TimeSheets");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.InventoryModel", b =>
                {
                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.ItemCatModel", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.ItemsModel", b =>
                {
                    b.Navigation("CartItem");

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.PostsModel", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("PostLike");

                    b.Navigation("PostPic");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.RestaurantsModel", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Comment");

                    b.Navigation("Employee");

                    b.Navigation("Followings");

                    b.Navigation("Inventory");

                    b.Navigation("Post");

                    b.Navigation("Reservation");

                    b.Navigation("RestCard");
                });

            modelBuilder.Entity("EffectiveWebProg.Models.UsersModel", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Followings");

                    b.Navigation("PostLike");

                    b.Navigation("Reservation");

                    b.Navigation("UserCard");
                });
#pragma warning restore 612, 618
        }
    }
}
